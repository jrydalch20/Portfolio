USE master;

DROP DATABASE IF EXISTS WIP_Take2;
CREATE DATABASE WIP_Take2;
USE WIP_Take2;

--Creates Suppliers Table and inserts values.
DROP TABLE IF EXISTS Suppliers;
CREATE TABLE Suppliers
( SupplierID			TINYINT NOT NULL IDENTITY(1,1), --SPK
  CompanyName			VARCHAR(30) NOT NULL,
  StreetAddress			VARCHAR(50) NOT NULL,
  City					VARCHAR(20) NOT NULL,
  [State]				CHAR(2) NOT NULL,
  Zipcode				VARCHAR(10) NOT NULL,

  CONSTRAINT PK_Suppliers_SupplierID PRIMARY KEY ( SupplierID )
  );
--Suppliers Table Inserts
INSERT INTO Suppliers ( CompanyName, StreetAddress, City, [State], Zipcode )
	Values	( 'Cotton USA', '111 Brick Ln', 'Salt Lake City', 'UT', '84112' ),
			( 'Angel Textiles', '844 Maple Ave', 'Los Angeles', 'CA', '90014' ),
			( 'California Group', '959 E Pico Blvd', 'Los Angeles', 'CA', '90021' ),
			( 'Fisher Textiles', '405 Spade Ln', 'Reno', 'NV', '61334' ),
			( 'UniPrints', '3980 Floral Ave', 'Hoboken', 'NJ', '31220' ),
			( 'USA Recycling Textile', '864 Shady Ln', 'San jose', 'CA', '92020' ),
			( 'Culp INC', '54500 Main St', 'Omaha', 'NE', '22233' ),
			( 'Glen Raven INC', '901 East St', 'Baltimore', 'MD', '55404' ),
			( 'Fletcher Textiles', '301 Negra Arroyo Ln', 'Albuquerque', 'NM', '10928' ),
			( 'Grand Rapids Fabric', '808 Long Ln', 'Grand Rapids', 'MI', '67751' ),
			( 'Burlington industries', '76641 Windy Rd', 'Chicago', 'IL', '77777' ),
			( 'W.L. Gore & Associates', '84 Second Ave', 'Miami', 'FL', '31023' );


--Creates Products Table with inserts
DROP TABLE IF EXISTS Products;
CREATE TABLE Products
( ProductID				INT NOT NULL IDENTITY(1,1), --SPK
  ProductName			VARCHAR(20) NOT NULL,
  ProductDescription	VARCHAR(150) NOT NULL,
  Cost					DECIMAL(6,2) NOT NULL,
  SalesPrice			DECIMAL(6,2) NOT NULL,
  ProductType			CHAR(1) NOT NULL,

  CONSTRAINT PK_Products_ProductID PRIMARY KEY ( ProductID ),
  CONSTRAINT CHECK_Products_ProductType CHECK ( ProductType IN ('T', 'A') )
  );
--Products Table Inserts
INSERT INTO Products ( ProductName, ProductDescription, Cost, SalesPrice, ProductType )
VALUES ( 'K87' , 'Lightweight 100% Cotton T-Shirt', '8.00', '25.00', 'T' ),
	   ( 'K126' , 'Lightweight 100% Cotton Long-Sleeve T-Shirt' , '10.00', '30.00', 'T' ),
	   ( 'K231' , 'Lightweight 100% Cotton Logo Long Sleeve T-Shirt' , '10.00' , '30.00' , 'T' ),
	   ( 'K288' , 'Loose Fit Midweight Logo Sleeve Graphic Hoodie' , '25.00' , '60.00' , 'T' ),
	   ( 'RD615', 'Rain Defender Loose Fit Heavyweight Hoodie' , '30.00' , '65.00' , 'T' ),
	   ( 'B273' , '27L Single Compartment Backpack' , '40.00' , '90.00' , 'A' ),
	   ( 'B418' , '40L Nylon Rolltop Backpack' , '60.00' , '170.00' , 'A' ),
	   ( 'C289' , 'Canvas Ball Cap' , '5.00' , '20.00' , 'A' ),
	   ( 'RD474' , 'Montana Loose Fit Insulated Jacket, Extreme Warmth Rating' , '80.00' , '165.00' , 'T' ),
	   ( 'P136' , 'Loose Fit Double Front Work Pants' , '15.00' , '60.00' , 'T' ),
	   ( 'A507' , 'Detroit Belt' , '14.00' , '42.00' , 'A' ),
	   ( 'A509' , 'Journeyman Belt' , '14.00' , '37.00' , 'A'  );

	   SELECT * FROM Products;
--Creates Textiles Table (Subtype) with inserts
DROP TABLE IF EXISTS Textiles;
CREATE TABLE Textiles
( ProductID				INT NOT NULL,
  TextileType			VARCHAR(25) NOT NULL,

  CONSTRAINT PK_Textiles_ProductID_TextileType PRIMARY KEY ( ProductID, TextileType ),
  CONSTRAINT FK_Textiles_ProductID FOREIGN KEY ( ProductID ) REFERENCES Products ( ProductID )
  );

--Textiles Inserts
INSERT INTO Textiles ( ProductID, TextileType )
VALUES ( 1, 'Shirt' ),
       ( 2, 'Shirt' ),
	   ( 3, 'Shirt' ),
	   ( 4, 'Hoodie' ),
	   ( 5, 'Hoodie' ),
	   ( 9, 'Jacket' ),
	   ( 10, 'Pants' );


--Creates Accesories Table (Subtype) with inserts
DROP TABLE IF EXISTS Accessories;
CREATE TABLE Accessories
( ProductID				INT NOT NULL,
  AccessoryType			VARCHAR(25) NOT NULL,

  CONSTRAINT PK_Accessories_ProductID_AccessoryType PRIMARY KEY (ProductID, AccessoryType),
  CONSTRAINT FK_Accessories_ProductID FOREIGN KEY ( ProductID ) REFERENCES Products ( ProductID )
);

--Accessories Table Inserts
INSERT INTO Accessories ( ProductID, AccessoryType )
VALUES ( 6, 'Backpack' ),
	   ( 7, 'Backpack' ),
	   ( 8, 'Hat' ),
	   ( 11, 'Belt' ),
	   ( 12, 'Belt' );

--Creates SupplierProducts Table (Associative Entity)
DROP TABLE IF EXISTS SupplierProducts;
CREATE TABLE SupplierProducts
( ProductID				INT NOT NULL,
  SupplierID			TINYINT NOT NULL,

  CONSTRAINT PK_SupplierProducts_ProductID_SupplierID PRIMARY KEY ( ProductID, SupplierID ),
  CONSTRAINT FK_SupplierProducts_ProductID FOREIGN KEY ( ProductID ) REFERENCES Products ( ProductID ),
  CONSTRAINT FK_SupplierProducts_SupplierID FOREIGN KEY ( SupplierID ) REFERENCES Suppliers ( SupplierID )
  );
--SupplierProducts Table Inserts
INSERT INTO SupplierProducts ( ProductID, SupplierID )
VALUES (10, 9),
(6, 7),
(3, 1),
(4, 5),
(8, 2),
(9, 12),
(2, 6),
(5, 10),
(1, 4),
(7, 11),
(11, 3),
(12, 8),
(1, 8),
(2, 11),
(3, 6),
(4, 10),
(5, 7),
(6, 1),
(7, 12),
(8, 5),
(9, 3),
(10, 4),
(11, 2),
(12, 9),
(4, 6);

--Creates Regions Table
DROP TABLE IF EXISTS Regions;
CREATE TABLE Regions
( RegionID				TINYINT NOT NULL IDENTITY(1,1), --SPK
  RegionName			VARCHAR(25) NOT NULL,
  RegionDescription		VARCHAR(150) NOT NULL,

  CONSTRAINT PK_Regions_RegionID PRIMARY KEY ( RegionID ),
);
--Regions Table Inserts
INSERT INTO Regions ( RegionName, RegionDescription )
VALUES ( 'WestCoast' , 'AK, CA, HI, OR, WA, AZ, CO, ID, MT, NV, NM, UT, WY' ),
	   ( 'NorthEast' , 'CT, ME, MA, NH, RI, VT, NJ, NY, PA' ),
	   ( 'Midwest' , 'IL, IN, MI, OH, WI, IA, KS, MN, MO, NE, ND,  SD' ),
	   ( 'South' , 'DE, FL, GA, MD, NC, SC, VA, WV, AL, KY, MS, TN, AR, LA, OK, TX' ); 

--Creates Stores Table
DROP TABLE IF EXISTS Stores;
CREATE TABLE Stores
( StoreID				TINYINT NOT NULL IDENTITY(1,1), --SPK
  RegionID				TINYINT NOT NULL,
  StreetAddress			VARCHAR(40) NOT NULL,
  City					VARCHAR(25) NOT NULL,
  [State]				CHAR(2) NOT NULL,
  Zipcode				VARCHAR(10) NOT NULL,

  CONSTRAINT PK_Stores_StoreID PRIMARY KEY ( StoreID ),
  CONSTRAINT FK_Stores_RegionID FOREIGN KEY ( RegionID ) REFERENCES Regions ( RegionID )
  );

--Stores Table Inserts
INSERT INTO Stores ( RegionID, StreetAddress, City, [State], Zipcode )
VALUES ( 1, '567 Northern Lights Blvd', 'Anchorage', 'AK', '99503'), 
	   ( 1, '789 Rainier Ave S', 'Seattle', 'WA', '98144'), 
	   ( 1, '1010 NW Lovejoy St', 'Portland', 'OR', '97209'), 
	   ( 1, '1234 Lombard St', 'San Francisco', 'CA', '94123'), 
	   ( 1, '2468 Wilshire Blvd', 'Los Angeles', 'CA', '90057'), 
	   ( 2, '123 Commonwealth Ave', 'Boston', 'MA', '02116'),
	   ( 2, '456 Congress St', 'Portland', 'ME', '04101'),
	   ( 2, '789 Elmwood Ave', 'Rochester', 'NY', '14618'),
	   ( 2, '101 Maple St', 'Burlington', 'VT', '05401'),
	   ( 2, '321 Main St', 'Hartford', 'CT', '06106'),
	   ( 3, '123 Sycamore Lane', 'Chicago', 'IL', '60601'),
	   ( 3, '456 Magnolia Drive', 'Minneapolis', 'MN', '55401'),
	   ( 3, '789 Willow Avenue', 'Kansas City', 'MO', '64101'),
	   ( 3, '101 Redwood Boulevard', 'Indianapolis', 'IN', '46201'),
	   ( 3, '321 Cedar Street', 'Detroit', 'MI', '48201'),
	   ( 4, '123 Mockingbird Lane', 'Houston', 'TX', '77002'),
	   ( 4, '123 Azalea Lane', 'San Antonio', 'TX', '78201'),
	   ( 4, '456 Cypress Street', 'Mobile', 'AL', '36601'),
	   ( 4, '789 Sweetgum Avenue', 'Jacksonville', 'FL', '32201'),
	   ( 4, '101 Palmetto Drive', 'Savannah', 'GA', '31401'),
	   ( 4, '747 Broadway Boulevard', 'Nashville', 'TN', '37203');

--Employees Table
DROP TABLE IF EXISTS Employees;
CREATE TABLE Employees
( EmployeeID			SMALLINT NOT NULL IDENTITY(1,1),
  FirstName				VARCHAR(20) NOT NULL,
  MiddleName			VARCHAR(20) DEFAULT NULL,
  LastName				VARCHAR(20) NOT NULL,
  Position				VARCHAR(30) NOT NULL,
  Salary				DECIMAL(8,2) NOT NULL
  

  CONSTRAINT PK_Employees_EmployeeID PRIMARY KEY ( EmployeeID )
  );

INSERT INTO Employees ( FirstName, MiddleName, LastName, Position, Salary )
VALUES 

--Corporate
('Helen', 'Walter', 'Jenkins', 'CEO', '250000.00'),
('Bruce', 'Phyllis', 'Hudson', 'CIO', '150000.00'),
('Carol', 'Philip', 'Mccoy', 'CFO', '165000.00'),

--Management
('Ryan', 'Philip', 'Foster', 'Manager', '83294.57'),
('Sarah', 'Eugene', 'Cox', 'Manager', '70732.89'),
('Laura', 'Jane', 'Ward', 'Manager', '74318.95'),
('Bruce', 'Rachel', 'Hernandez', 'Manager', '84923.46'),
('Christina', 'Henry', 'Gomez', 'Manager', '64492.17'),
('Amy', 'Tina', 'Torres', 'Manager', '81751.83'),
('Roger', 'Diana', 'Morrison', 'Manager', '71029.36'),
('Rachel', 'Wayne', 'Hart', 'Manager', '72390.72'),
('Adam', 'Janet', 'Hansen', 'Manager', '68516.29'),
('Rebecca', 'Raymond', 'Curtis', 'Manager', '62247.84'),
('Shirley', 'Gerald', 'Russell', 'Manager', '75698.23'),
('Victor', 'Doris', 'Ford', 'Assistant Manager', '39046.88'),
('Janice', 'Bruce', 'Gray', 'Assistant Manager', '46389.75'),
('Jonathan', 'Shirley', 'Hernandez', 'Assistant Manager', '33442.57'),
('Linda', 'Carl', 'Mccoy', 'Assistant Manager', '55313.12'),
('Jeremy', 'Karen', 'Bailey', 'Assistant Manager', '51472.95'),
('Rebecca', 'Roger', 'Gordon', 'Assistant Manager', '44677.23'),
('Kevin', 'Sharon', 'Patterson', 'Assistant Manager', '39987.64'),
('Laura', 'Bruce', 'Fowler', 'Assistant Manager', '52505.31'),
('Stephen', 'Sarah', 'Gonzalez', 'Assistant Manager', '36682.09'),
('Carol', 'Martin', 'Ramirez', 'Assistant Manager', '45783.64'),
('Jessica', 'David', 'Taylor', 'Manager', '65324.54'),
('Michael', 'Jennifer', 'Lee', 'Manager', '62198.47'),
('Amanda', 'Matthew', 'Martinez', 'Manager', '76894.12'),
('David', 'Jessica', 'Young', 'Manager', '71492.33'),
('Elizabeth', 'William', 'White', 'Manager', '68502.26'),
('John', 'Amanda', 'Hernandez', 'Manager', '60987.59'),
('Melissa', 'Daniel', 'Anderson', 'Manager', '69372.75'),
('Christopher', 'Elizabeth', 'Gonzalez', 'Manager', '83205.68'),
('Sarah', 'Christopher', 'Johnson', 'Manager', '79134.29'),
('Jason', 'Melissa', 'Lopez', 'Manager', '72761.42'),
('Maria', 'Jason', 'Brown', 'Assistant Manager', '49173.85'),
('Brian', 'Michelle', 'Clark', 'Assistant Manager', '43256.79'),
('Emily', 'Daniel', 'Lewis', 'Assistant Manager', '34562.42'),
('Robert', 'Maria', 'Harris', 'Assistant Manager', '39914.28'),
('Jessica', 'Robert', 'Thompson', 'Assistant Manager', '52781.94'),
('Matthew', 'Emily', 'Martinez', 'Assistant Manager', '57834.75'),
('Jennifer', 'Brian', 'Young', 'Assistant Manager', '51987.36'),
('Daniel', 'Michelle', 'Gonzalez', 'Assistant Manager', '44436.28'),
('Michelle', 'Jason', 'King', 'Assistant Manager', '46291.73'),
('David', 'Maria', 'Hill', 'Assistant Manager', '37652.98');

--Creates Customers Table
DROP TABLE IF EXISTS Customers;
CREATE TABLE Customers
( CustomerID			INT NOT NULL IDENTITY(1,1),
  FirstName				VARCHAR(25) NOT NULL,
  MiddleName			VARCHAR(25) DEFAULT NULL,
  LastName				VARCHAR(25) NOT NULL,
  StreetAddress			VARCHAR(40) NOT NULL,
  City					VARCHAR(25) NOT NULL,
  [State]				CHAR(2) NOT NULL,
  Zipcode				VARCHAR(10) NOT NULL,

  CONSTRAINT PK_Customers_CustomerID PRIMARY KEY ( CustomerID ),
);
INSERT INTO Customers ( FirstName, MiddleName, LastName, StreetAddress, City, [State], Zipcode )
VALUES ('Emma', 'Grace', 'Smith', '123 Maple Street', 'Springfield', 'IL', '62704'),
('Liam', 'Alexander', 'Johnson', '456 Oak Avenue', 'Sunnyvale', 'CA', '94086'),
('Olivia', 'Rose', 'Brown', '789 Pine Road', 'Portland', 'OR', '97201'),
('Noah', 'James', 'Jones', '1010 Elm Boulevard', 'Seattle', 'WA', '98101'),
('Ava', 'Elizabeth', 'Williams', '111 Pine Street', 'Boston', 'MA', '02108'),
('William', 'Michael', 'Davis', '1313 Maple Avenue', 'Austin', 'TX', '78701'),
('Sophia', 'Grace', 'Miller', '1515 Oak Lane', 'Los Angeles', 'CA', '90001'),
('Alexander', 'David', 'Wilson', '1717 Elm Street', 'San Francisco', 'CA', '94102'),
('Mia', 'Grace', 'Taylor', '1919 Pine Road', 'New York', 'NY', '10001'),
('Ethan', 'Benjamin', 'Anderson', '2020 Oak Avenue', 'Chicago', 'IL', '60601'),
('Amelia', 'Charlotte', 'Thomas', '2121 Maple Boulevard', 'Miami', 'FL', '33101'),
('Isabella', 'Sophia', 'Jackson', '2323 Elm Lane', 'Denver', 'CO', '80202'),
('James', 'Joseph', 'White', '2525 Pine Street', 'Phoenix', 'AZ', '85001'),
('Sophia', 'Elizabeth', 'Harris', '2727 Oak Road', 'Philadelphia', 'PA', '19101'),
('Lucas', 'William', 'Martin', '2929 Elm Avenue', 'Dallas', 'TX', '75201'),
('Charlotte', 'Anne', 'Thompson', '3030 Maple Lane', 'Atlanta', 'GA', '30301'),
('Henry', 'Daniel', 'Garcia', '3131 Pine Boulevard', 'Houston', 'TX', '77001'),
('Ava', 'Grace', 'Martinez', '3333 Oak Court', 'Seattle', 'WA', '98101'),
('Mason', 'Joseph', 'Robinson', '3535 Elm Circle', 'San Diego', 'CA', '92101'),
('Mia', 'Sophia', 'Clark', '3737 Pine Drive', 'San Antonio', 'TX', '78201'),
('Oliver', 'Daniel', 'Rodriguez', '3939 Maple Place', 'San Jose', 'CA', '95101'),
('Emma', 'Rose', 'Lewis', '4141 Oak Way', 'Detroit', 'MI', '48201'),
('Liam', 'Alexander', 'Lee', '4343 Elm Street', 'Charlotte', 'NC', '28201'),
('Ava', 'Charlotte', 'Walker', '4545 Pine Avenue', 'Portland', 'OR', '97201'),
('Noah', 'James', 'Hall', '4747 Maple Road', 'Boston', 'MA', '02108'),
('Olivia', 'Elizabeth', 'Allen', '4949 Oak Lane', 'Austin', 'TX', '78701'),
('William', 'Michael', 'Young', '5151 Elm Boulevard', 'Los Angeles', 'CA', '90001'),
('Sophia', 'Grace', 'Hernandez', '5353 Pine Street', 'San Francisco', 'CA', '94102'),
('Alexander', 'David', 'King', '5555 Oak Avenue', 'New York', 'NY', '10001'),
('Mia', 'Grace', 'Wright', '5757 Elm Road', 'Chicago', 'IL', '60601'),
('Ethan', 'Benjamin', 'Lopez', '5959 Pine Lane', 'Miami', 'FL', '33101'),
('Amelia', 'Charlotte', 'Scott', '6161 Maple Boulevard', 'Denver', 'CO', '80202'),
('Isabella', 'Sophia', 'Green', '6363 Elm Lane', 'Phoenix', 'AZ', '85001'),
('James', 'Joseph', 'Adams', '6565 Pine Street', 'Philadelphia', 'PA', '19101'),
('Sophia', 'Elizabeth', 'Baker', '6767 Oak Road', 'Dallas', 'TX', '75201'),
('Lucas', 'William', 'Nelson', '6969 Maple Lane', 'Atlanta', 'GA', '30301'),
('Charlotte', 'Anne', 'Carter', '7171 Pine Boulevard', 'Houston', 'TX', '77001'),
('Henry', 'Daniel', 'Mitchell', '7373 Oak Court', 'Seattle', 'WA', '98101'),
('Ava', 'Grace', 'Perez', '7575 Elm Circle', 'San Diego', 'CA', '92101'),
('Mason', 'Joseph', 'Roberts', '7777 Pine Drive', 'San Antonio', 'TX', '78201'),
('Mia', 'Sophia', 'Cook', '7979 Oak Place', 'San Jose', 'CA', '95101'),
('Oliver', 'Daniel', 'Morris', '8181 Maple Way', 'Detroit', 'MI', '48201'),
('Emma', 'Rose', 'Nguyen', '8383 Elm Street', 'Charlotte', 'NC', '28201'),
('Liam', 'Alexander', 'Kelly', '8585 Pine Avenue', 'Portland', 'OR', '97201'),
('Ava', 'Charlotte', 'Hill', '8787 Oak Lane', 'Boston', 'MA', '02108'),
('Noah', 'James', 'Flores', '8989 Elm Boulevard', 'Austin', 'TX', '78701'),
('Olivia', 'Elizabeth', 'Rivera', '9191 Pine Street', 'Los Angeles', 'CA', '90001'),
('William', 'Michael', 'Gomez', '9393 Oak Avenue', 'San Francisco', 'CA', '94102'),
('Sophia', 'Grace', 'Morgan', '9595 Elm Lane', 'New York', 'NY', '10001'),
('Alexander', 'David', 'Bell', '9797 Pine Road', 'Chicago', 'IL', '60601'),
('Mia', 'Grace', 'Murphy', '9999 Oak Way', 'Miami', 'FL', '33101'),
('Ethan', 'Benjamin', 'Cooper', '10101 Maple Boulevard', 'Denver', 'CO', '80202'),
('Amelia', 'Charlotte', 'Richardson', '10303 Elm Lane', 'Phoenix', 'AZ', '85001'),
('Isabella', 'Sophia', 'Cox', '10505 Pine Street', 'Philadelphia', 'PA', '19101'),
('James', 'Joseph', 'Howard', '10707 Oak Road', 'Dallas', 'TX', '75201'),
('Sophia', 'Elizabeth', 'Ward', '10909 Maple Lane', 'Atlanta', 'GA', '30301'),
('Lucas', 'William', 'Torres', '11111 Pine Boulevard', 'Houston', 'TX', '77001'),
('Charlotte', 'Anne', 'Peterson', '11313 Oak Court', 'Seattle', 'WA', '98101'),
('Henry', 'Daniel', 'Gray', '11515 Elm Circle', 'San Diego', 'CA', '92101'),
('Ava', 'Grace', 'James', '11717 Pine Drive', 'San Antonio', 'TX', '78201'),
('Mason', 'Joseph', 'Hayes', '11919 Oak Road', 'San Jose', 'CA', '95101'),
('Mia', 'Sophia', 'Myers', '12121 Maple Way', 'Detroit', 'MI', '48201'),
('Oliver', 'Daniel', 'Ford', '12323 Elm Street', 'Charlotte', 'NC', '28201'),
('Emma', 'Rose', 'Barnes', '12525 Pine Avenue', 'Portland', 'OR', '97201'),
('Liam', 'Alexander', 'Brooks', '12727 Oak Lane', 'Boston', 'MA', '02108'),
('Ava', 'Charlotte', 'Long', '12929 Elm Boulevard', 'Austin', 'TX', '78701'),
('Noah', 'James', 'Stewart', '13131 Pine Street', 'Los Angeles', 'CA', '90001'),
('Olivia', 'Elizabeth', 'Morales', '13333 Oak Avenue', 'San Francisco', 'CA', '94102'),
('William', 'Michael', 'Sullivan', '13535 Elm Lane', 'New York', 'NY', '10001'),
('Sophia', 'Grace', 'Russell', '13737 Pine Road', 'Chicago', 'IL', '60601'),
('Alexander', 'David', 'Ortiz', '13939 Oak Boulevard', 'Miami', 'FL', '33101'),
('Mia', 'Grace', 'Fowler', '14141 Maple Avenue', 'Denver', 'CO', '80202'),
('Ethan', 'Benjamin', 'Gordon', '14343 Elm Lane', 'Phoenix', 'AZ', '85001'),
('Amelia', 'Charlotte', 'Burns', '14545 Pine Street', 'Philadelphia', 'PA', '19101'),
('Isabella', 'Sophia', 'Daniels', '14747 Oak Road', 'Dallas', 'TX', '75201'),
('James', 'Joseph', 'Wallace', '14949 Maple Lane', 'Atlanta', 'GA', '30301'),
('Sophia', 'Elizabeth', 'Fisher', '15151 Pine Boulevard', 'Houston', 'TX', '77001'),
('Lucas', 'William', 'Dixon', '15353 Oak Court', 'Seattle', 'WA', '98101'),
('Charlotte', 'Anne', 'Holland', '15555 Elm Circle', 'San Diego', 'CA', '92101'),
('Henry', 'Daniel', 'Cruz', '15757 Pine Drive', 'San Antonio', 'TX', '78201'),
('Ava', 'Grace', 'Snyder', '15959 Oak Road', 'San Jose', 'CA', '95101'),
('Mason', 'Joseph', 'Stanley', '16161 Maple Way', 'Detroit', 'MI', '48201'),
('Mia', 'Sophia', 'Barker', '16363 Elm Street', 'Charlotte', 'NC', '28201'),
('Oliver', 'Daniel', 'Ramos', '16565 Pine Avenue', 'Portland', 'OR', '97201'),
('Emma', 'Rose', 'Graham', '16767 Oak Lane', 'Boston', 'MA', '02108'),
('Liam', 'Alexander', 'Kim', '16969 Elm Boulevard', 'Austin', 'TX', '78701'),
('Ava', 'Charlotte', 'Wheeler', '17171 Pine Street', 'Los Angeles', 'CA', '90001'),
('Noah', 'James', 'Sims', '17373 Oak Avenue', 'San Francisco', 'CA', '94102'),
('Olivia', 'Elizabeth', 'Pearson', '17575 Elm Lane', 'New York', 'NY', '10001'),
('William', 'Michael', 'Owens', '17777 Pine Road', 'Chicago', 'IL', '60601'),
('Sophia', 'Grace', 'Reyes', '17979 Oak Boulevard', 'Miami', 'FL', '33101'),
('Alexander', 'David', 'Wall', '18181 Maple Lane', 'Denver', 'CO', '80202'),
('Mia', 'Grace', 'Diaz', '18383 Elm Lane', 'Phoenix', 'AZ', '85001'),
('Ethan', 'Benjamin', 'Haynes', '18585 Pine Street', 'Philadelphia', 'PA', '19101'),
('Amelia', 'Charlotte', 'Fletcher', '18787 Oak Road', 'Dallas', 'TX', '75201'),
('Isabella', 'Sophia', 'Vargas', '18989 Maple Lane', 'Atlanta', 'GA', '30301'),
('James', 'Joseph', 'Brewer', '19191 Pine Boulevard', 'Houston', 'TX', '77001'),
('Sophia', 'Elizabeth', 'Larson', '19393 Oak Court', 'Seattle', 'WA', '98101'),
('Lucas', 'William', 'Ferguson', '19595 Elm Circle', 'San Diego', 'CA', '92101'),
('Charlotte', 'Anne', 'Barnett', '19797 Pine Drive', 'San Antonio', 'TX', '78201'),
('Henry', 'Daniel', 'Gardner', '20000 Oak Place', 'San Jose', 'CA', '95101'),
('Ava', 'Grace', 'Hudson', '20202 Maple Way', 'Detroit', 'MI', '48201'),
('Mason', 'Joseph', 'Chavez', '20404 Elm Street', 'Charlotte', 'NC', '28201'),
('Mia', 'Sophia', 'Malone', '20606 Pine Avenue', 'Portland', 'OR', '97201'),
('Oliver', 'Daniel', 'Hubbard', '20808 Oak Lane', 'Boston', 'MA', '02108'),
('Emma', 'Rose', 'Hansen', '21010 Elm Boulevard', 'Austin', 'TX', '78701'),
('Liam', 'Alexander', 'Pierce', '21212 Pine Street', 'Los Angeles', 'CA', '90001'),
('Ava', 'Charlotte', 'Morrison', '21414 Oak Avenue', 'San Francisco', 'CA', '94102'),
('Noah', 'James', 'Fleming', '21616 Elm Lane', 'New York', 'NY', '10001'),
('Olivia', 'Elizabeth', 'Sharp', '21818 Pine Road', 'Chicago', 'IL', '60601'),
('William', 'Michael', 'Hayden', '22020 Oak Boulevard', 'Miami', 'FL', '33101'),
('Sophia', 'Grace', 'Norton', '22222 Maple Lane', 'Denver', 'CO', '80202'),
('Alexander', 'David', 'Baldwin', '22424 Elm Lane', 'Phoenix', 'AZ', '85001'),
('Mia', 'Grace', 'Hancock', '22626 Pine Street', 'Philadelphia', 'PA', '19101'),
('Ethan', 'Benjamin', 'Gibson', '22828 Oak Road', 'Dallas', 'TX', '75201'),
('Amelia', 'Charlotte', 'Gaines', '23030 Maple Lane', 'Atlanta', 'GA', '30301'),
('Isabella', 'Sophia', 'Vaughn', '23232 Pine Boulevard', 'Houston', 'TX', '77001'),
('James', 'Joseph', 'Benson', '23434 Oak Court', 'Seattle', 'WA', '98101'),
('Sophia', 'Elizabeth', 'Haley', '23636 Elm Circle', 'San Diego', 'CA', '92101'),
('Lucas', 'William', 'Mercado', '23838 Pine Drive', 'San Antonio', 'TX', '78201'),
('Charlotte', 'Anne', 'Randolph', '24040 Oak Place', 'San Jose', 'CA', '95101'),
('Henry', 'Daniel', 'Briggs', '24242 Maple Way', 'Detroit', 'MI', '48201'),
('Ava', 'Grace', 'Hammond', '24444 Elm Street', 'Charlotte', 'NC', '28201'),
('Mason', 'Joseph', 'Santiago', '24646 Pine Avenue', 'Portland', 'OR', '97201'),
('Mia', 'Sophia', 'Atkinson', '24848 Oak Lane', 'Boston', 'MA', '02108'),
('Oliver', 'Daniel', 'Orozco', '25050 Elm Boulevard', 'Austin', 'TX', '78701'),
('Emma', 'Rose', 'Terry', '25252 Pine Street', 'Los Angeles', 'CA', '90001'),
('Liam', 'Alexander', 'Abbott', '25454 Oak Avenue', 'San Francisco', 'CA', '94102'),
('Ava', 'Charlotte', 'Patrick', '25656 Elm Lane', 'New York', 'NY', '10001'),
('Noah', 'James', 'Pittman', '25858 Pine Road', 'Chicago', 'IL', '60601'),
('Olivia', 'Elizabeth', 'Lara', '26060 Oak Boulevard', 'Miami', 'FL', '33101'),
('William', 'Michael', 'Randall', '26262 Maple Lane', 'Denver', 'CO', '80202'),
('Sophia', 'Grace', 'Skinner', '26464 Elm Lane', 'Phoenix', 'AZ', '85001'),
('Alexander', 'David', 'Wilcox', '26666 Pine Street', 'Philadelphia', 'PA', '19101'),
('Mia', 'Grace', 'Whitney', '26868 Oak Road', 'Dallas', 'TX', '75201'),
('Ethan', 'Benjamin', 'Frost', '27070 Maple Lane', 'Atlanta', 'GA', '30301'),
('Amelia', 'Charlotte', 'Hickman', '27272 Pine Boulevard', 'Houston', 'TX', '77001'),
('Isabella', 'Sophia', 'Cochran', '27474 Oak Court', 'Seattle', 'WA', '98101'),
('James', 'Joseph', 'Herman', '27676 Elm Circle', 'San Diego', 'CA', '92101'),
('Sophia', 'Elizabeth', 'Robles', '27878 Pine Drive', 'San Antonio', 'TX', '78201'),
('Lucas', 'William', 'McCarthy', '28080 Oak Place', 'San Jose', 'CA', '95101'),
('Charlotte', 'Anne', 'Rosales', '28282 Maple Way', 'Detroit', 'MI', '48201'),
('Henry', 'Daniel', 'Cherry', '28484 Elm Street', 'Charlotte', 'NC', '28201'),
('Ava', 'Grace', 'Swanson', '28686 Pine Avenue', 'Portland', 'OR', '97201'),
('Mason', 'Joseph', 'Goff', '28888 Oak Lane', 'Boston', 'MA', '02108'),
('Mia', 'Sophia', 'Morse', '29090 Elm Boulevard', 'Austin', 'TX', '78701'),
('Oliver', 'Daniel', 'Branch', '29292 Pine Street', 'Los Angeles', 'CA', '90001'),
('Emma', 'Rose', 'Church', '29494 Oak Avenue', 'San Francisco', 'CA', '94102'),
('Liam', 'Alexander', 'Curtis', '29696 Elm Lane', 'New York', 'NY', '10001'),
('Ava', 'Charlotte', 'Cannon', '29898 Pine Road', 'Chicago', 'IL', '60601'),
('Noah', 'James', 'Harrell', '30000 Oak Boulevard', 'Miami', 'FL', '33101'),
('Olivia', 'Elizabeth', 'David', '30202 Maple Lane', 'Denver', 'CO', '80202'),
('William', 'Michael', 'Dickson', '30404 Elm Lane', 'Phoenix', 'AZ', '85001'),
('Sophia', 'Grace', 'Bolton', '30606 Pine Street', 'Philadelphia', 'PA', '19101'),
('Alexander', 'David', 'Wiley', '30808 Oak Road', 'Dallas', 'TX', '75201'),
('Mia', 'Grace', 'Golden', '31010 Maple Lane', 'Atlanta', 'GA', '30301'),
('Ethan', 'Benjamin', 'Meadows', '31212 Pine Boulevard', 'Houston', 'TX', '77001'),
('Amelia', 'Charlotte', 'Sears', '31414 Oak Court', 'Seattle', 'WA', '98101'),
('Isabella', 'Sophia', 'Gentry', '31616 Elm Circle', 'San Diego', 'CA', '92101'),
('James', 'Joseph', 'Finn', '31818 Pine Drive', 'San Antonio', 'TX', '78201'),
('Sophia', 'Elizabeth', 'Pugh', '32020 Oak Place', 'San Jose', 'CA', '95101'),
('Lucas', 'William', 'Key', '32222 Maple Way', 'Detroit', 'MI', '48201'),
('Charlotte', 'Anne', 'Lester', '32424 Elm Street', 'Charlotte', 'NC', '28201'),
('Henry', 'Daniel', 'Heath', '32626 Pine Avenue', 'Portland', 'OR', '97201'),
('Ava', 'Grace', 'Holder', '32828 Oak Lane', 'Boston', 'MA', '02108'),
('Mason', 'Joseph', 'Bush', '33030 Elm Boulevard', 'Austin', 'TX', '78701'),
('Mia', 'Sophia', 'Gill', '33232 Pine Street', 'Los Angeles', 'CA', '90001'),
('Oliver', 'Daniel', 'Manning', '33434 Oak Avenue', 'San Francisco', 'CA', '94102'),
('Emma', 'Rose', 'Parrish', '33636 Elm Lane', 'New York', 'NY', '10001'),
('Liam', 'Alexander', 'Hutchinson', '33838 Pine Road', 'Chicago', 'IL', '60601'),
('Ava', 'Charlotte', 'Holden', '34040 Oak Boulevard', 'Miami', 'FL', '33101'),
('Noah', 'James', 'Vincent', '34242 Maple Lane', 'Denver', 'CO', '80202'),
('Olivia', 'Elizabeth', 'York', '34444 Elm Lane', 'Phoenix', 'AZ', '85001'),
('William', 'Michael', 'Whitaker', '34646 Pine Street', 'Philadelphia', 'PA', '19101'),
('Sophia', 'Grace', 'Compton', '34848 Oak Road', 'Dallas', 'TX', '75201'),
('Alexander', 'David', 'Seymour', '35050 Maple Lane', 'Atlanta', 'GA', '30301'),
('Mia', 'Grace', 'McKenzie', '35252 Pine Boulevard', 'Houston', 'TX', '77001'),
('Ethan', 'Benjamin', 'Cameron', '35454 Oak Court', 'Seattle', 'WA', '98101'),
('Amelia', 'Charlotte', 'Grimes', '35656 Elm Circle', 'San Diego', 'CA', '92101'),
('Isabella', 'Sophia', 'Morrow', '35858 Pine Drive', 'San Antonio', 'TX', '78201'),
('James', 'Joseph', 'Dickinson', '36060 Oak Place', 'San Jose', 'CA', '95101'),
('Sophia', 'Elizabeth', 'Winters', '36262 Maple Way', 'Detroit', 'MI', '48201'),
('Lucas', 'William', 'Sawyer', '36464 Elm Street', 'Charlotte', 'NC', '28201'),
('Charlotte', 'Anne', 'McIntyre', '36666 Pine Avenue', 'Portland', 'OR', '97201'),
('Henry', 'Daniel', 'Landry', '36868 Oak Lane', 'Boston', 'MA', '02108'),
('Ava', 'Grace', 'Odom', '37070 Elm Boulevard', 'Austin', 'TX', '78701');

--Creates CustomerEmails Table
DROP TABLE IF EXISTS CustomerEmails;
CREATE TABLE CustomerEmails
( CustomerID			INT NOT NULL,
  EmailAddress			VARCHAR(50),
  PrimaryEmailFlag		CHAR(1),

  CONSTRAINT PK_CustomerEmails_CustomerID_EmailAddress PRIMARY KEY ( CustomerID, EmailAddress ),
  CONSTRAINT FK_CustomerEmails_CustomerID FOREIGN KEY ( CustomerID ) REFERENCES Customers ( CustomerID ),
  CONSTRAINT CHECK_CustomerEmails_PrimaryEmailFlag CHECK ( PrimaryEmailFlag IN ('Y', 'N') )
  );

INSERT INTO CustomerEmails ( CustomerID, EmailAddress, PrimaryEmailFlag )
VALUES 
(1, 'john.doe@example.com', 'Y'),
(2, 'jane.smith@example.com', 'Y'),
(3, 'michael.johnson@example.com', 'Y'),
(4, 'emily.wilson@example.com', 'Y'),
(5, 'david.jackson@example.com', 'Y'),
(6, 'sarah.anderson@example.com', 'Y'),
(7, 'robert.thomas@example.com', 'Y'),
(8, 'lisa.roberts@example.com', 'Y'),
(9, 'william.brown@example.com', 'Y'),
(10, 'jennifer.garcia@example.com', 'Y'),
(11, 'matthew.davis@example.com', 'Y'),
(12, 'amanda.miller@example.com', 'Y'),
(13, 'james.taylor@example.com', 'Y'),
(14, 'laura.martinez@example.com', 'Y'),
(15, 'charles.hernandez@example.com', 'Y'),
(16, 'olivia.wright@example.com', 'Y'),
(17, 'ryan.lopez@example.com', 'Y'),
(18, 'ashley.young@example.com', 'Y'),
(19, 'daniel.king@example.com', 'Y'),
(20, 'samantha.lewis@example.com', 'Y'),
(21, 'roberta.clark@example.com', 'Y'),
(22, 'benjamin.hall@example.com', 'Y'),
(23, 'melissa.allen@example.com', 'Y'),
(24, 'richard.scott@example.com', 'Y'),
(25, 'natalie.hill@example.com', 'Y'),
(26, 'alexander.green@example.com', 'Y'),
(27, 'emily.adams@example.com', 'Y'),
(28, 'christopher.baker@example.com', 'Y'),
(29, 'jessica.rivera@example.com', 'Y'),
(30, 'nathan.cook@example.com', 'Y'),
(31, 'rebecca.mitchell@example.com', 'Y'),
(32, 'jacob.carter@example.com', 'Y'),
(33, 'hannah.gonzalez@example.com', 'Y'),
(34, 'eric.robertson@example.com', 'Y'),
(35, 'megan.kelly@example.com', 'Y'),
(36, 'tyler.nelson@example.com', 'Y'),
(37, 'katherine.harris@example.com', 'Y'),
(38, 'brandon.white@example.com', 'Y'),
(39, 'elizabeth.cruz@example.com', 'Y'),
(40, 'zachary.butler@example.com', 'Y'),
(41, 'victoria.howard@example.com', 'Y'),
(42, 'justin.nguyen@example.com', 'Y'),
(43, 'amanda.cole@example.com', 'Y'),
(44, 'jason.ward@example.com', 'Y'),
(45, 'michelle.alexander@example.com', 'Y'),
(46, 'kevin.myers@example.com', 'Y'),
(47, 'kelsey.diaz@example.com', 'Y'),
(48, 'gary.gonzales@example.com', 'Y'),
(49, 'courtney.perez@example.com', 'Y'),
(50, 'brian.ortiz@example.com', 'Y'),
(51, 'angela.gomez@example.com', 'Y'),
(52, 'austin.collins@example.com', 'Y'),
(53, 'grace.reed@example.com', 'Y'),
(54, 'jesse.stewart@example.com', 'Y'),
(55, 'morgan.murphy@example.com', 'Y'),
(56, 'shannon.bailey@example.com', 'Y'),
(57, 'cody.kim@example.com', 'Y'),
(58, 'tracy.flores@example.com', 'Y'),
(59, 'taylor.henderson@example.com', 'Y'),
(60, 'logan.fernandez@example.com', 'Y'),
(61, 'julia.hughes@example.com', 'Y'),
(62, 'jesse.watkins@example.com', 'Y'),
(63, 'devin.wheeler@example.com', 'Y'),
(64, 'ashley.warren@example.com', 'Y'),
(65, 'cassandra.wells@example.com', 'Y'),
(66, 'jacob.dixon@example.com', 'Y'),
(67, 'katie.ramos@example.com', 'Y'),
(68, 'brian.evans@example.com', 'Y'),
(69, 'claire.bell@example.com', 'Y'),
(70, 'derek.foster@example.com', 'Y'),
(71, 'lauren.sanders@example.com', 'Y'),
(72, 'gregory.ross@example.com', 'Y'),
(73, 'leah.jenkins@example.com', 'Y'),
(74, 'zoe.murray@example.com', 'Y'),
(75, 'aaron.washington@example.com', 'Y'),
(76, 'madison.price@example.com', 'Y'),
(77, 'peter.gibson@example.com', 'Y'),
(78, 'lindsay.harrison@example.com', 'Y'),
(79, 'ethan.woods@example.com', 'Y'),
(80, 'holly.butler@example.com', 'Y'),
(81, 'dylan.mcdonald@example.com', 'Y'),
(82, 'victor.kennedy@example.com', 'Y'),
(83, 'stacy.myers@example.com', 'Y'),
(84, 'lucas.wagner@example.com', 'Y'),
(85, 'kayla.jones@example.com', 'Y'),
(86, 'philip.long@example.com', 'Y'),
(87, 'kristen.morris@example.com', 'Y'),
(88, 'mason.elliott@example.com', 'Y'),
(89, 'rachel.jordan@example.com', 'Y'),
(90, 'cory.bell@example.com', 'Y'),
(91, 'lillian.fisher@example.com', 'Y'),
(92, 'marcus.harrison@example.com', 'Y'),
(93, 'anna.richardson@example.com', 'Y'),
(94, 'gerald.fowler@example.com', 'Y'),
(95, 'teresa.hunt@example.com', 'Y'),
(96, 'gregory.perkins@example.com', 'Y'),
(97, 'jenny.hughes@example.com', 'Y'),
(98, 'alexis.cole@example.com', 'Y'),
(99, 'rodney.foster@example.com', 'Y'),
(100, 'erin.barnes@example.com', 'Y'),
(101, 'clayton.knight@example.com', 'Y'),
(102, 'shelby.kelly@example.com', 'Y'),
(103, 'martha.stone@example.com', 'Y'),
(104, 'jeremy.rivera@example.com', 'Y'),
(105, 'tara.bryant@example.com', 'Y'),
(106, 'tony.henry@example.com', 'Y'),
(107, 'joanna.sims@example.com', 'Y'),
(108, 'neil.kim@example.com', 'Y'),
(109, 'brenda.webb@example.com', 'Y'),
(110, 'marie.marshall@example.com', 'Y'),
(111, 'leonard.curtis@example.com', 'Y'),
(112, 'cassandra.gordon@example.com', 'Y'),
(113, 'bradley.king@example.com', 'Y'),
(114, 'helen.hansen@example.com', 'Y'),
(115, 'alejandro.hart@example.com', 'Y'),
(116, 'dana.gibson@example.com', 'Y'),
(117, 'candace.wheeler@example.com', 'Y'),
(118, 'felicia.oliver@example.com', 'Y'),
(119, 'gina.mcdonald@example.com', 'Y'),
(120, 'jared.jordan@example.com', 'Y'),
(121, 'carolyn.nichols@example.com', 'Y'),
(122, 'sergio.young@example.com', 'Y'),
(123, 'anna.nelson@example.com', 'Y'),
(124, 'derrick.hall@example.com', 'Y'),
(125, 'cheryl.soto@example.com', 'Y'),
(126, 'mitchell.lane@example.com', 'Y'),
(127, 'terrance.snyder@example.com', 'Y'),
(128, 'heather.christensen@example.com', 'Y'),
(129, 'travis.dunn@example.com', 'Y'),
(130, 'holly.mcguire@example.com', 'Y'),
(131, 'jaime.wilkins@example.com', 'Y'),
(132, 'mario.howard@example.com', 'Y'),
(133, 'ruth.ramos@example.com', 'Y'),
(134, 'charlie.holmes@example.com', 'Y'),
(135, 'jennifer.bowman@example.com', 'Y'),
(136, 'douglas.norman@example.com', 'Y'),
(137, 'amanda.fitzgerald@example.com', 'Y'),
(138, 'leonard.murphy@example.com', 'Y'),
(139, 'jenny.owens@example.com', 'Y'),
(140, 'alicia.gilbert@example.com', 'Y'),
(141, 'brandon.sullivan@example.com', 'Y'),
(142, 'maria.kim@example.com', 'Y'),
(143, 'debra.perkins@example.com', 'Y'),
(144, 'terrence.bishop@example.com', 'Y'),
(145, 'cynthia.horton@example.com', 'Y'),
(146, 'kenneth.estrada@example.com', 'Y'),
(147, 'brittany.hughes@example.com', 'Y'),
(148, 'nicholas.cunningham@example.com', 'Y'),
(149, 'elizabeth.hall@example.com', 'Y'),
(150, 'willie.caldwell@example.com', 'Y'),
(151, 'laura.moss@example.com', 'Y'),
(152, 'gerald.roy@example.com', 'Y'),
(153, 'judy.payne@example.com', 'Y'),
(154, 'cody.davis@example.com', 'Y'),
(155, 'angelina.anderson@example.com', 'Y'),
(156, 'ronald.fox@example.com', 'Y'),
(157, 'tracy.patterson@example.com', 'Y'),
(158, 'brianna.bryant@example.com', 'Y'),
(159, 'albert.wells@example.com', 'Y'),
(160, 'lindsay.douglas@example.com', 'Y'),
(161, 'heidi.hart@example.com', 'Y'),
(162, 'justin.morrison@example.com', 'Y'),
(163, 'cynthia.nelson@example.com', 'Y'),
(164, 'rodney.holland@example.com', 'Y'),
(165, 'nina.reed@example.com', 'Y'),
(166, 'marshall.stewart@example.com', 'Y'),
(167, 'sabrina.griffin@example.com', 'Y'),
(168, 'brandon.dunn@example.com', 'Y'),
(169, 'chelsea.washington@example.com', 'Y'),
(170, 'geraldine.hicks@example.com', 'Y'),
(171, 'ian.bell@example.com', 'Y'),
(172, 'bethany.knight@example.com', 'Y'),
(173, 'brian.bowman@example.com', 'Y'),
(174, 'rachael.mckinney@example.com', 'Y'),
(175, 'darren.hernandez@example.com', 'Y'),
(176, 'michelle.robinson@example.com', 'Y'),
(177, 'jacob.schmidt@example.com', 'Y'),
(178, 'alexis.sanchez@example.com', 'Y'),
(179, 'kyle.marshall@example.com', 'Y'),
(180, 'diana.hansen@example.com', 'Y'),
(181, 'seth.thompson@example.com', 'Y'),
(182, 'maria.gardner@example.com', 'Y'),
(183, 'jordan.franklin@example.com', 'Y'),
(184, 'ashley.peters@example.com', 'Y'),
(185, 'jesus.hayes@example.com', 'Y'),
(186, 'andrea.hudson@example.com', 'Y'),
(45, 'yadayada@Outlook.com', 'N'),
(90, 'FUNdamentals@gmail.com', 'N'),
(140, 'wipissocool@carhartt.com', 'N'),
(32, 'OJdidIt@glovedontfit.net', 'N');

 --Creates CustomerPhones Table
 DROP TABLE IF EXISTS CustomerPhones;
 CREATE TABLE CustomerPhones
 ( CustomerID			INT NOT NULL,
   Phone				VARCHAR(18) NOT NULL,
   PrimaryPhoneFlag		CHAR(1),

   CONSTRAINT PK_CustomerPhones_CustomerID_Phone PRIMARY KEY ( CustomerID, Phone ),
   CONSTRAINT FK_CustomerPhones_CustomerID FOREIGN KEY ( CustomerID ) REFERENCES Customers ( CustomerID ),
   CONSTRAINT CHECK_CustomerPhones_PrimaryPhoneFlag CHECK ( PrimaryPhoneFlag IN ('Y', 'N') )
   );

INSERT INTO CustomerPhones ( CustomerID, Phone, PrimaryPhoneFlag )
VALUES (1, '123-456-7890', 'Y'),
(2, '234-567-8901', 'Y'),
(3, '345-678-9012', 'Y'),
(4, '456-789-0123', 'Y'),
(5, '567-890-1234', 'Y'),
(6, '678-901-2345', 'Y'),
(7, '789-012-3456', 'Y'),
(8, '890-123-4567', 'Y'),
(9, '901-234-5678', 'Y'),
(10, '012-345-6789', 'Y'),
(11, '123-456-7890', 'Y'),
(12, '234-567-8901', 'Y'),
(13, '345-678-9012', 'Y'),
(14, '456-789-0123', 'Y'),
(15, '567-890-1234', 'Y'),
(16, '678-901-2345', 'Y'),
(17, '789-012-3456', 'Y'),
(18, '890-123-4567', 'Y'),
(19, '901-234-5678', 'Y'),
(20, '012-345-6789', 'Y'),
(21, '123-456-7890', 'Y'),
(22, '234-567-8901', 'Y'),
(23, '345-678-9012', 'Y'),
(24, '456-789-0123', 'Y'),
(25, '567-890-1234', 'Y'),
(26, '678-901-2345', 'Y'),
(27, '789-012-3456', 'Y'),
(28, '890-123-4567', 'Y'),
(29, '901-234-5678', 'Y'),
(30, '012-345-6789', 'Y'),
(31, '123-456-7890', 'Y'),
(32, '234-567-8901', 'Y'),
(33, '345-678-9012', 'Y'),
(34, '456-789-0123', 'Y'),
(35, '567-890-1234', 'Y'),
(36, '678-901-2345', 'Y'),
(37, '789-012-3456', 'Y'),
(38, '890-123-4567', 'Y'),
(39, '901-234-5678', 'Y'),
(40, '012-345-6789', 'Y'),
(41, '123-456-7890', 'Y'),
(42, '234-567-8901', 'Y'),
(43, '345-678-9012', 'Y'),
(44, '456-789-0123', 'Y'),
(45, '567-890-1234', 'Y'),
(46, '678-901-2345', 'Y'),
(47, '789-012-3456', 'Y'),
(48, '890-123-4567', 'Y'),
(49, '901-234-5678', 'Y'),
(50, '012-345-6789', 'Y'),
(51, '123-456-7890', 'Y'),
(52, '234-567-8901', 'Y'),
(53, '345-678-9012', 'Y'),
(54, '456-789-0123', 'Y'),
(55, '567-890-1234', 'Y'),
(56, '678-901-2345', 'Y'),
(57, '789-012-3456', 'Y'),
(58, '890-123-4567', 'Y'),
(59, '901-234-5678', 'Y'),
(60, '012-345-6789', 'Y'),
(61, '123-456-7890', 'Y'),
(62, '234-567-8901', 'Y'),
(63, '345-678-9012', 'Y'),
(64, '456-789-0123', 'Y'),
(65, '567-890-1234', 'Y'),
(66, '678-901-2345', 'Y'),
(67, '789-012-3456', 'Y'),
(68, '890-123-4567', 'Y'),
(69, '901-234-5678', 'Y'),
(70, '012-345-6789', 'Y'),
(71, '123-456-7890', 'Y'),
(72, '234-567-8901', 'Y'),
(73, '345-678-9012', 'Y'),
(74, '456-789-0123', 'Y'),
(75, '567-890-1234', 'Y'),
(76, '678-901-2345', 'Y'),
(77, '789-012-3456', 'Y'),
(78, '890-123-4567', 'Y'),
(79, '901-234-5678', 'Y'),
(80, '012-345-6789', 'Y'),
(81, '123-456-7890', 'Y'),
(82, '234-567-8901', 'Y'),
(83, '345-678-9012', 'Y'),
(84, '456-789-0123', 'Y'),
(85, '567-890-1234', 'Y'),
(86, '678-901-2345', 'Y'),
(87, '789-012-3456', 'Y'),
(88, '890-123-4567', 'Y'),
(89, '901-234-5678', 'Y'),
(90, '012-345-6789', 'Y'),
(91, '123-456-7890', 'Y'),
(92, '234-567-8901', 'Y'),
(93, '345-678-9012', 'Y'),
(94, '456-789-0123', 'Y'),
(95, '567-890-1234', 'Y'),
(96, '678-901-2345', 'Y'),
(97, '789-012-3456', 'Y'),
(98, '890-123-4567', 'Y'),
(99, '901-234-5678', 'Y'),
(100, '012-345-6789', 'Y'),
(101, '123-456-7890', 'Y'),
(102, '234-567-8901', 'Y'),
(103, '345-678-9012', 'Y'),
(104, '456-789-0123', 'Y'),
(105, '567-890-1234', 'Y'),
(106, '678-901-2345', 'Y'),
(107, '789-012-3456', 'Y'),
(108, '890-123-4567', 'Y'),
(109, '901-234-5678', 'Y'),
(110, '012-345-6789', 'Y'),
(111, '123-456-7890', 'Y'),
(112, '234-567-8901', 'Y'),
(113, '345-678-9012', 'Y'),
(114, '456-789-0123', 'Y'),
(115, '567-890-1234', 'Y'),
(116, '678-901-2345', 'Y'),
(117, '789-012-3456', 'Y'),
(118, '890-123-4567', 'Y'),
(119, '901-234-5678', 'Y'),
(120, '012-345-6789', 'Y'),
(121, '123-456-7890', 'Y'),
(122, '234-567-8901', 'Y'),
(123, '345-678-9012', 'Y'),
(124, '456-789-0123', 'Y'),
(125, '567-890-1234', 'Y'),
(126, '678-901-2345', 'Y'),
(127, '789-012-3456', 'Y'),
(128, '890-123-4567', 'Y'),
(129, '901-234-5678', 'Y'),
(130, '012-345-6789', 'Y'),
(131, '123-456-7890', 'Y'),
(132, '234-567-8901', 'Y'),
(133, '345-678-9012', 'Y'),
(134, '456-789-0123', 'Y'),
(135, '567-890-1234', 'Y'),
(136, '678-901-2345', 'Y'),
(137, '789-012-3456', 'Y'),
(138, '890-123-4567', 'Y'),
(139, '901-234-5678', 'Y'),
(140, '012-345-6789', 'Y'),
(141, '123-456-7890', 'Y'),
(142, '234-567-8901', 'Y'),
(143, '345-678-9012', 'Y'),
(144, '456-789-0123', 'Y'),
(145, '567-890-1234', 'Y'),
(146, '678-901-2345', 'Y'),
(147, '789-012-3456', 'Y'),
(148, '890-123-4567', 'Y'),
(149, '901-234-5678', 'Y'),
(150, '012-345-6789', 'Y'),
(151, '123-456-7890', 'Y'),
(152, '234-567-8901', 'Y'),
(153, '345-678-9012', 'Y'),
(154, '456-789-0123', 'Y'),
(155, '567-890-1234', 'Y'),
(156, '678-901-2345', 'Y'),
(157, '789-012-3456', 'Y'),
(158, '890-123-4567', 'Y'),
(159, '901-234-5678', 'Y'),
(160, '012-345-6789', 'Y'),
(161, '123-456-7890', 'Y'),
(162, '234-567-8901', 'Y'),
(163, '345-678-9012', 'Y'),
(164, '456-789-0123', 'Y'),
(165, '567-890-1234', 'Y'),
(166, '678-901-2345', 'Y'),
(167, '789-012-3456', 'Y'),
(168, '890-123-4567', 'Y'),
(169, '901-234-5678', 'Y'),
(170, '012-345-6789', 'Y'),
(171, '123-456-7890', 'Y'),
(172, '234-567-8901', 'Y'),
(173, '345-678-9012', 'Y'),
(174, '456-789-0123', 'Y'),
(175, '567-890-1234', 'Y'),
(176, '678-901-2345', 'Y'),
(177, '789-012-3456', 'Y'),
(178, '890-123-4567', 'Y'),
(179, '901-234-5678', 'Y'),
(180, '012-345-6789', 'Y'),
(181, '123-456-7890', 'Y'),
(182, '234-567-8901', 'Y'),
(183, '345-678-9012', 'Y'),
(184, '456-789-0123', 'Y'),
(185, '567-890-1234', 'Y'),
(186, '678-901-2345', 'Y');

--Creates the Orders Table
DROP TABLE IF EXISTS Orders;
CREATE TABLE Orders
( OrderID				BIGINT NOT NULL IDENTITY(1,1),
  CustomerID			INT NOT NULL,
  EmployeeID			SMALLINT NOT NULL,
  OrderDateTime			DATETIME NOT NULL,
  Quantity				SMALLINT NOT NULL,


  CONSTRAINT PK_Orders_OrderID_OrderDateTime PRIMARY KEY ( OrderID ),
  CONSTRAINT FK_Orders_CustomerID FOREIGN KEY ( CustomerID ) REFERENCES Customers ( CustomerID ),
  CONSTRAINT FK_Orders_EmployeeID FOREIGN KEY ( EmployeeID ) REFERENCES Employees ( EmployeeID ),
  );

  INSERT INTO Orders ( CustomerID, EmployeeID, OrderDateTime, Quantity )
 VALUES 
 (1, 4, '2023-06-01 08:00:00', 5),
(2, 5, '2023-06-01 10:00:00', 3),
(3, 6, '2023-06-01 12:00:00', 7),
(4, 7, '2023-06-02 08:00:00', 2),
(5, 8, '2023-06-02 10:00:00', 4),
(6, 9, '2023-06-02 12:00:00', 6),
(7, 10, '2023-06-03 08:00:00', 1),
(8, 11, '2023-06-03 10:00:00', 8),
(9, 12, '2023-06-03 12:00:00', 3),
(10, 13, '2023-06-04 08:00:00', 6),
(11, 14, '2023-06-04 10:00:00', 9),
(12, 15, '2023-06-04 12:00:00', 2),
(13, 16, '2023-06-05 08:00:00', 4),
(14, 17, '2023-06-05 10:00:00', 7),
(15, 18, '2023-06-05 12:00:00', 5),
(16, 19, '2023-06-06 08:00:00', 1),
(17, 20, '2023-06-06 10:00:00', 8),
(18, 21, '2023-06-06 12:00:00', 3),
(19, 22, '2023-06-07 08:00:00', 6),
(20, 23, '2023-06-07 10:00:00', 2),
(21, 24, '2023-06-07 12:00:00', 7),
(22, 25, '2023-06-08 08:00:00', 4),
(23, 26, '2023-06-08 10:00:00', 6),
(24, 27, '2023-06-08 12:00:00', 2),
(25, 28, '2023-06-09 08:00:00', 5),
(26, 29, '2023-06-09 10:00:00', 1),
(27, 30, '2023-06-09 12:00:00', 8),
(28, 31, '2023-06-10 08:00:00', 3),
(29, 32, '2023-06-10 10:00:00', 6),
(30, 33, '2023-06-10 12:00:00', 7),
(31, 34, '2023-06-11 08:00:00', 2),
(32, 35, '2023-06-11 10:00:00', 4),
(33, 36, '2023-06-11 12:00:00', 6),
(34, 37, '2023-06-12 08:00:00', 1),
(35, 38, '2023-06-12 10:00:00', 8),
(36, 39, '2023-06-12 12:00:00', 3),
(37, 40, '2023-06-13 08:00:00', 6),
(38, 41, '2023-06-13 10:00:00', 9),
(39, 42, '2023-06-13 12:00:00', 2),
(40, 43, '2023-06-14 08:00:00', 4),
(41, 44, '2023-06-14 10:00:00', 7),
(42, 1, '2023-06-14 12:00:00', 5),
(43, 2, '2023-06-15 08:00:00', 1),
(44, 3, '2023-06-15 10:00:00', 8),
(45, 4, '2023-06-15 12:00:00', 3),
(46, 5, '2023-06-16 08:00:00', 6),
(47, 6, '2023-06-16 10:00:00', 2),
(48, 7, '2023-06-16 12:00:00', 7),
(49, 8, '2023-06-17 08:00:00', 4),
(50, 9, '2023-06-17 10:00:00', 6),
(51, 10, '2023-06-17 12:00:00', 2),
(52, 11, '2023-06-18 08:00:00', 5),
(53, 12, '2023-06-18 10:00:00', 1),
(54, 13, '2023-06-18 12:00:00', 8),
(55, 14, '2023-06-19 08:00:00', 3),
(56, 15, '2023-06-19 10:00:00', 6),
(57, 16, '2023-06-19 12:00:00', 7),
(58, 17, '2023-06-20 08:00:00', 2),
(59, 18, '2023-06-20 10:00:00', 4),
(60, 19, '2023-06-20 12:00:00', 6),
(61, 20, '2023-06-21 08:00:00', 1),
(62, 21, '2023-06-21 10:00:00', 8),
(63, 22, '2023-06-21 12:00:00', 3),
(64, 23, '2023-06-22 08:00:00', 6),
(65, 24, '2023-06-22 10:00:00', 9),
(66, 25, '2023-06-22 12:00:00', 2),
(67, 26, '2023-06-23 08:00:00', 4),
(68, 27, '2023-06-23 10:00:00', 7),
(69, 28, '2023-06-23 12:00:00', 5),
(70, 29, '2023-06-24 08:00:00', 1),
(71, 30, '2023-06-24 10:00:00', 8),
(72, 31, '2023-06-24 12:00:00', 3),
(73, 32, '2023-06-25 08:00:00', 6),
(74, 33, '2023-06-25 10:00:00', 2),
(75, 34, '2023-06-25 12:00:00', 7),
(76, 35, '2023-06-26 08:00:00', 4),
(77, 36, '2023-06-26 10:00:00', 6),
(78, 37, '2023-06-26 12:00:00', 2),
(79, 38, '2023-06-27 08:00:00', 5),
(80, 39, '2023-06-27 10:00:00', 1),
(81, 40, '2023-06-27 12:00:00', 8),
(82, 41, '2023-06-28 08:00:00', 3),
(83, 42, '2023-06-28 10:00:00', 6),
(84, 43, '2023-06-28 12:00:00', 7),
(85, 44, '2023-06-29 08:00:00', 2),
(86, 1, '2023-06-29 10:00:00', 4),
(87, 2, '2023-06-29 12:00:00', 6),
(88, 3, '2023-06-30 08:00:00', 1),
(89, 4, '2023-06-30 10:00:00', 8),
(90, 5, '2023-06-30 12:00:00', 3),
(91, 6, '2023-07-01 08:00:00', 6),
(92, 7, '2023-07-01 10:00:00', 9),
(93, 8, '2023-07-01 12:00:00', 2),
(94, 9, '2023-07-02 08:00:00', 4),
(95, 10, '2023-07-02 10:00:00', 7),
(96, 11, '2023-07-02 12:00:00', 5),
(97, 12, '2023-07-03 08:00:00', 2),
(98, 13, '2023-07-03 10:00:00', 6),
(99, 14, '2023-07-03 12:00:00', 1),
(100, 15, '2023-07-04 08:00:00', 8),
(101, 16, '2023-07-04 10:00:00', 3),
(102, 17, '2023-07-04 12:00:00', 6),
(103, 18, '2023-07-05 08:00:00', 2),
(104, 19, '2023-07-05 10:00:00', 7),
(105, 20, '2023-07-05 12:00:00', 4),
(106, 21, '2023-07-06 08:00:00', 6),
(107, 22, '2023-07-06 10:00:00', 1),
(108, 23, '2023-07-06 12:00:00', 9),
(109, 24, '2023-07-07 08:00:00', 3),
(110, 25, '2023-07-07 10:00:00', 6),
(111, 26, '2023-07-07 12:00:00', 2),
(112, 27, '2023-07-08 08:00:00', 5),
(113, 28, '2023-07-08 10:00:00', 1),
(114, 29, '2023-07-08 12:00:00', 7),
(115, 30, '2023-07-09 08:00:00', 4),
(116, 31, '2023-07-09 10:00:00', 8),
(117, 32, '2023-07-09 12:00:00', 2),
(118, 33, '2023-07-10 08:00:00', 6),
(119, 34, '2023-07-10 10:00:00', 3),
(120, 35, '2023-07-10 12:00:00', 7),
(121, 36, '2023-07-11 08:00:00', 2),
(122, 37, '2023-07-11 10:00:00', 6),
(123, 38, '2023-07-11 12:00:00', 1),
(124, 39, '2023-07-12 08:00:00', 8),
(125, 40, '2023-07-12 10:00:00', 4),
(126, 41, '2023-07-12 12:00:00', 6),
(127, 42, '2023-07-13 08:00:00', 2),
(128, 43, '2023-07-13 10:00:00', 7),
(129, 44, '2023-07-13 12:00:00', 5),
(130, 1, '2023-07-14 08:00:00', 1),
(131, 2, '2023-07-14 10:00:00', 6),
(132, 3, '2023-07-14 12:00:00', 9),
(133, 4, '2023-07-15 08:00:00', 2),
(134, 5, '2023-07-15 10:00:00', 6),
(135, 6, '2023-07-15 12:00:00', 3),
(136, 7, '2023-07-16 08:00:00', 6),
(137, 8, '2023-07-16 10:00:00', 1),
(138, 9, '2023-07-16 12:00:00', 8),
(139, 10, '2023-07-17 08:00:00', 4),
(140, 11, '2023-07-17 10:00:00', 7),
(141, 12, '2023-07-17 12:00:00', 5),
(142, 13, '2023-07-18 08:00:00', 2),
(143, 14, '2023-07-18 10:00:00', 6),
(144, 15, '2023-07-18 12:00:00', 1),
(145, 16, '2023-07-19 08:00:00', 8),
(146, 17, '2023-07-19 10:00:00', 4),
(147, 18, '2023-07-19 12:00:00', 6),
(148, 19, '2023-07-20 08:00:00', 2),
(149, 20, '2023-07-20 10:00:00', 7),
(150, 21, '2023-07-20 12:00:00', 5),
(151, 22, '2023-07-21 08:00:00', 1),
(152, 23, '2023-07-21 10:00:00', 6),
(153, 24, '2023-07-21 12:00:00', 9),
(154, 25, '2023-07-22 08:00:00', 2),
(155, 26, '2023-07-22 10:00:00', 6),
(156, 27, '2023-07-22 12:00:00', 3),
(157, 28, '2023-07-23 08:00:00', 6),
(158, 29, '2023-07-23 10:00:00', 1),
(159, 30, '2023-07-23 12:00:00', 8),
(160, 31, '2023-07-24 08:00:00', 4),
(161, 32, '2023-07-24 10:00:00', 7),
(162, 33, '2023-07-24 12:00:00', 5),
(163, 34, '2023-07-25 08:00:00', 2),
(164, 35, '2023-07-25 10:00:00', 6),
(165, 36, '2023-07-25 12:00:00', 1),
(166, 37, '2023-07-26 08:00:00', 8),
(167, 38, '2023-07-26 10:00:00', 4),
(168, 39, '2023-07-26 12:00:00', 6),
(169, 40, '2023-07-27 08:00:00', 2),
(170, 41, '2023-07-27 10:00:00', 7),
(171, 42, '2023-07-27 12:00:00', 5),
(172, 43, '2023-07-28 08:00:00', 1),
(173, 44, '2023-07-28 10:00:00', 6),
(174, 1, '2023-07-28 12:00:00', 9),
(175, 2, '2023-07-29 08:00:00', 2),
(176, 3, '2023-07-29 10:00:00', 6),
(177, 4, '2023-07-29 12:00:00', 3),
(178, 5, '2023-07-30 08:00:00', 6),
(179, 6, '2023-07-30 10:00:00', 1),
(180, 7, '2023-07-30 12:00:00', 8),
(181, 8, '2023-07-31 08:00:00', 4),
(182, 9, '2023-07-31 10:00:00', 7),
(183, 10, '2023-07-31 12:00:00', 5),
(184, 11, '2023-08-01 08:00:00', 2),
(185, 12, '2023-08-01 10:00:00', 6),
(186, 13, '2023-08-01 12:00:00', 9),
(1, 14, '2023-08-02 08:00:00', 2),
(2, 15, '2023-08-02 10:00:00', 6),
(3, 16, '2023-08-02 12:00:00', 3),
(4, 17, '2023-08-03 08:00:00', 6),
(5, 18, '2023-08-03 10:00:00', 1),
(6, 19, '2023-08-03 12:00:00', 8),
(7, 20, '2023-08-04 08:00:00', 4),
(8, 21, '2023-08-04 10:00:00', 7),
(9, 22, '2023-08-04 12:00:00', 5),
(10, 23, '2023-08-05 08:00:00', 2),
(11, 24, '2023-08-05 10:00:00', 6),
(12, 25, '2023-08-05 12:00:00', 9),
(13, 26, '2023-08-06 08:00:00', 2),
(14, 27, '2023-08-06 10:00:00', 6),
(15, 28, '2023-08-06 12:00:00', 3),
(16, 29, '2023-08-07 08:00:00', 6),
(17, 30, '2023-08-07 10:00:00', 1),
(18, 31, '2023-08-07 12:00:00', 8),
(19, 32, '2023-08-08 08:00:00', 4),
(20, 33, '2023-08-08 10:00:00', 7),
(21, 34, '2023-08-08 12:00:00', 5),
(22, 35, '2023-08-09 08:00:00', 2),
(23, 36, '2023-08-09 10:00:00', 6),
(24, 37, '2023-08-09 12:00:00', 9),
(25, 38, '2023-08-10 08:00:00', 2),
(26, 39, '2023-08-10 10:00:00', 6),
(27, 40, '2023-08-10 12:00:00', 3),
(28, 41, '2023-08-11 08:00:00', 6),
(29, 42, '2023-08-11 10:00:00', 1),
(30, 43, '2023-08-11 12:00:00', 8),
(31, 44, '2023-08-12 08:00:00', 4),
(32, 1, '2023-08-12 10:00:00', 7),
(33, 2, '2023-08-12 12:00:00', 5),
(34, 3, '2023-08-13 08:00:00', 2),
(35, 4, '2023-08-13 10:00:00', 6),
(36, 5, '2023-08-13 12:00:00', 9),
(37, 6, '2023-08-14 08:00:00', 2),
(38, 7, '2023-08-14 10:00:00', 6),
(39, 8, '2023-08-14 12:00:00', 3),
(40, 9, '2023-08-15 08:00:00', 6),
(41, 10, '2023-08-15 10:00:00', 1),
(42, 11, '2023-08-15 12:00:00', 8),
(43, 12, '2023-08-16 08:00:00', 4),
(44, 13, '2023-08-16 10:00:00', 7),
(45, 14, '2023-08-16 12:00:00', 5),
(46, 15, '2023-08-17 08:00:00', 2),
(47, 16, '2023-08-17 10:00:00', 6),
(48, 17, '2023-08-17 12:00:00', 9),
(49, 18, '2023-08-18 08:00:00', 2),
(50, 19, '2023-08-18 10:00:00', 6),
(51, 20, '2023-08-18 12:00:00', 3),
(52, 21, '2023-08-19 08:00:00', 6),
(53, 22, '2023-08-19 10:00:00', 1),
(54, 23, '2023-08-19 12:00:00', 8),
(55, 24, '2023-08-20 08:00:00', 4),
(56, 25, '2023-08-20 10:00:00', 7),
(57, 26, '2023-08-20 12:00:00', 5),
(58, 27, '2023-08-21 08:00:00', 2),
(59, 28, '2023-08-21 10:00:00', 6),
(60, 29, '2023-08-21 12:00:00', 9),
(61, 30, '2023-08-22 08:00:00', 2),
(62, 31, '2023-08-22 10:00:00', 6),
(63, 32, '2023-08-22 12:00:00', 3),
(64, 33, '2023-08-23 08:00:00', 6),
(65, 34, '2023-08-23 10:00:00', 1),
(66, 35, '2023-08-23 12:00:00', 8),
(67, 36, '2023-08-24 08:00:00', 4),
(68, 37, '2023-08-24 10:00:00', 7),
(69, 38, '2023-08-24 12:00:00', 5),
(70, 39, '2023-08-25 08:00:00', 2),
(71, 40, '2023-08-25 10:00:00', 6),
(72, 41, '2023-08-25 12:00:00', 9),
(73, 42, '2023-08-26 08:00:00', 2),
(74, 43, '2023-08-26 10:00:00', 6),
(75, 44, '2023-08-26 12:00:00', 3),
(76, 1, '2023-08-27 08:00:00', 6),
(77, 2, '2023-08-27 10:00:00', 1),
(78, 3, '2023-08-27 12:00:00', 8),
(79, 4, '2023-08-28 08:00:00', 4),
(80, 5, '2023-08-28 10:00:00', 7),
(81, 6, '2023-08-28 12:00:00', 5),
(82, 7, '2023-08-29 08:00:00', 2),
(83, 8, '2023-08-29 10:00:00', 6),
(84, 9, '2023-08-29 12:00:00', 3),
(85, 10, '2023-08-30 08:00:00', 6),
(86, 11, '2023-08-30 10:00:00', 1),
(87, 12, '2023-08-30 12:00:00', 8),
(88, 13, '2023-08-31 08:00:00', 4),
(89, 14, '2023-08-31 10:00:00', 7),
(90, 15, '2023-08-31 12:00:00', 5),
(91, 16, '2023-09-01 08:00:00', 2),
(92, 17, '2023-09-01 10:00:00', 6),
(93, 18, '2023-09-01 12:00:00', 9),
(94, 19, '2023-09-02 08:00:00', 2),
(95, 20, '2023-09-02 10:00:00', 6),
(96, 21, '2023-09-02 12:00:00', 3),
(97, 22, '2023-09-03 08:00:00', 6),
(98, 23, '2023-09-03 10:00:00', 1),
(99, 24, '2023-09-03 12:00:00', 8),
(100, 25, '2023-09-04 08:00:00', 4),
(101, 26, '2023-09-04 10:00:00', 7),
(102, 27, '2023-09-04 12:00:00', 5),
(103, 28, '2023-09-05 08:00:00', 2),
(104, 29, '2023-09-05 10:00:00', 6),
(105, 30, '2023-09-05 12:00:00', 9),
(106, 31, '2023-09-06 08:00:00', 2),
(107, 32, '2023-09-06 10:00:00', 6),
(108, 33, '2023-09-06 12:00:00', 3),
(109, 34, '2023-09-07 08:00:00', 6),
(110, 35, '2023-09-07 10:00:00', 1),
(111, 36, '2023-09-07 12:00:00', 8),
(112, 37, '2023-09-08 08:00:00', 4),
(113, 38, '2023-09-08 10:00:00', 7),
(114, 39, '2023-09-08 12:00:00', 5),
(115, 40, '2023-09-09 08:00:00', 2),
(116, 41, '2023-09-09 10:00:00', 6),
(117, 42, '2023-09-09 12:00:00', 3),
(118, 43, '2023-09-10 08:00:00', 6),
(119, 44, '2023-09-10 10:00:00', 1),
(120, 1, '2023-09-10 12:00:00', 8);

--Creates OSPDist Table
DROP TABLE IF EXISTS OSPDist;
CREATE TABLE OSPDist
( OrderID			BIGINT NOT NULL,
  ProductID			INT NOT NULL,
  StoreID			TINYINT NOT NULL,

CONSTRAINT PK_OSPDist_OrderID_ProductID_StoreID PRIMARY KEY ( OrderID, ProductID, StoreID ),
CONSTRAINT FK_OSPDist_OrderID FOREIGN KEY ( OrderID ) REFERENCES Orders ( OrderID ),
CONSTRAINT FK_OSPDist_ProductID FOREIGN KEY ( ProductID ) REFERENCES Products ( ProductID ),
CONSTRAINT FK_OSPDist_StoreID FOREIGN KEY ( StoreID ) REFERENCES Stores ( StoreID )
);

INSERT INTO OSPDist ( OrderID, ProductID, StoreID )
VALUES 
(1, 9, 19),
(2, 7, 10),
(3, 1, 12),
(4, 2, 6),
(5, 4, 2),
(6, 6, 16),
(7, 8, 7),
(8, 11, 18),
(9, 3, 6),
(10, 11, 12),
(11, 10, 15),
(12, 5, 3),
(13, 12, 5),
(14, 7, 19),
(15, 8, 14),
(16, 7, 13),
(17, 1, 14),
(18, 11, 8),
(19, 7, 18),
(20, 8, 12),
(21, 10, 10),
(22, 8, 5),
(23, 6, 6),
(24, 4, 1),
(25, 5, 17),
(26, 1, 20),
(27, 10, 4),
(28, 12, 10),
(29, 11, 6),
(30, 8, 10),
(31, 11, 1),
(32, 6, 12),
(33, 10, 9),
(34, 2, 6),
(35, 7, 19),
(36, 4, 11),
(37, 5, 2),
(38, 9, 14),
(39, 12, 15),
(40, 8, 1),
(41, 1, 5),
(42, 4, 14),
(43, 2, 2),
(44, 12, 9),
(45, 1, 3),
(46, 3, 19),
(47, 5, 7),
(48, 10, 3),
(49, 12, 2),
(50, 8, 21),
(51, 9, 5),
(52, 3, 8),
(53, 6, 7),
(54, 8, 9),
(55, 4, 6),
(56, 1, 7),
(57, 6, 12),
(58, 12, 4),
(59, 7, 10),
(60, 4, 20),
(61, 2, 2),
(62, 8, 7),
(63, 3, 15),
(64, 5, 20),
(65, 12, 15),
(66, 9, 10),
(67, 3, 18),
(68, 1, 8),
(69, 11, 13),
(70, 2, 11),
(71, 7, 5),
(72, 4, 15),
(73, 8, 18),
(74, 10, 1),
(75, 5, 9),
(76, 6, 3),
(77, 12, 6),
(78, 9, 8),
(79, 11, 14),
(80, 7, 9),
(81, 2, 8),
(82, 8, 7),
(83, 10, 15),
(84, 6, 11),
(85, 3, 10),
(86, 5, 2),
(87, 1, 7),
(88, 4, 13),
(89, 12, 18),
(90, 7, 4),
(91, 8, 15),
(92, 10, 6),
(93, 2, 12),
(94, 11, 3),
(95, 3, 17),
(96, 5, 4),
(97, 6, 14),
(98, 1, 1),
(99, 4, 20),
(100, 12, 9),
(101, 9, 6),
(102, 11, 11),
(103, 7, 16),
(104, 8, 18),
(105, 7, 12),
(106, 1, 19),
(107, 11, 2),
(108, 7, 18),
(109, 8, 13),
(110, 10, 15),
(111, 8, 4),
(112, 6, 5),
(113, 4, 12),
(114, 5, 10),
(115, 1, 1),
(116, 12, 11),
(117, 7, 9),
(118, 8, 6),
(119, 10, 7),
(120, 2, 4),
(121, 11, 16),
(122, 6, 21),
(123, 9, 5),
(124, 3, 9),
(125, 5, 1),
(126, 1, 13),
(127, 10, 19),
(128, 12, 4),
(129, 11, 5),
(130, 8, 16),
(131, 11, 3),
(132, 6, 13),
(133, 10, 17),
(134, 2, 7),
(135, 7, 6),
(136, 4, 20),
(137, 5, 10),
(138, 9, 3),
(139, 12, 14),
(140, 7, 8),
(141, 8, 18),
(142, 7, 4),
(143, 1, 15),
(144, 11, 9),
(145, 7, 1),
(146, 8, 17),
(147, 10, 20),
(148, 8, 10),
(149, 6, 4),
(150, 4, 12),
(151, 5, 7),
(152, 1, 6),
(153, 12, 15),
(154, 7, 8),
(155, 8, 2),
(156, 10, 13),
(157, 8, 14),
(158, 6, 7),
(159, 4, 20),
(160, 5, 5),
(161, 1, 9),
(162, 12, 18),
(163, 7, 2),
(164, 8, 13),
(165, 10, 17),
(166, 8, 4),
(167, 6, 8),
(168, 4, 12),
(169, 5, 20),
(170, 1, 5),
(171, 12, 6),
(172, 7, 16),
(173, 8, 19),
(174, 10, 1),
(175, 9, 3),
(176, 3, 14),
(177, 5, 8),
(178, 1, 2),
(179, 10, 10),
(180, 12, 20),
(181, 11, 9),
(182, 8, 4),
(183, 11, 1),
(184, 6, 15),
(185, 4, 11),
(186, 5, 6),
(187, 1, 21),
(188, 12, 3),
(189, 9, 7),
(190, 3, 19),
(191, 5, 14),
(192, 1, 8),
(193, 10, 20),
(194, 12, 12),
(195, 11, 6),
(196, 8, 16),
(197, 11, 11),
(198, 6, 7),
(199, 10, 5),
(200, 2, 12),
(201, 7, 13),
(202, 4, 2),
(203, 5, 17),
(204, 9, 3),
(205, 12, 4),
(206, 8, 20),
(207, 1, 5),
(208, 4, 21),
(209, 2, 8),
(210, 12, 13),
(211, 1, 15),
(212, 3, 6),
(213, 5, 14),
(214, 10, 1),
(215, 12, 16),
(216, 11, 9),
(217, 8, 12),
(218, 11, 7),
(219, 6, 13),
(220, 10, 18),
(221, 2, 11),
(222, 7, 2),
(223, 4, 7),
(224, 5, 20),
(225, 9, 17),
(226, 12, 4),
(227, 11, 10),
(228, 8, 19),
(229, 11, 14),
(230, 6, 8),
(231, 10, 18),
(232, 2, 13),
(233, 7, 20),
(234, 4, 1),
(235, 5, 3),
(236, 9, 7),
(237, 12, 18),
(238, 8, 15),
(239, 1, 5),
(240, 4, 9),
(241, 2, 20),
(242, 12, 4),
(243, 11, 17),
(244, 7, 11),
(245, 8, 6),
(246, 7, 21),
(247, 1, 14),
(248, 11, 3),
(249, 7, 12),
(250, 8, 8),
(251, 10, 1),
(252, 8, 3),
(253, 6, 18),
(254, 4, 7),
(255, 5, 10),
(256, 1, 6),
(257, 12, 16),
(258, 7, 8),
(259, 8, 2),
(260, 10, 13),
(261, 8, 14),
(262, 6, 7),
(263, 4, 3),
(264, 5, 20),
(265, 1, 5),
(266, 12, 6),
(267, 7, 16),
(268, 8, 19),
(269, 10, 1),
(270, 9, 3),
(271, 3, 14),
(272, 5, 8),
(273, 1, 2),
(274, 10, 10),
(275, 12, 20),
(276, 11, 9),
(277, 8, 4),
(278, 11, 1),
(279, 6, 15),
(280, 4, 11),
(281, 5, 6),
(282, 1, 21),
(283, 12, 3),
(284, 9, 7),
(285, 3, 19),
(286, 5, 14),
(287, 1, 8),
(288, 10, 20),
(289, 12, 12),
(290, 11, 6),
(291, 8, 16),
(292, 11, 11),
(293, 6, 7),
(294, 10, 5),
(295, 2, 12),
(296, 7, 13),
(297, 4, 2),
(298, 5, 17),
(299, 9, 3),
(300, 12, 4),
(301, 8, 20),
(302, 1, 5),
(303, 4, 21),
(304, 2, 8),
(305, 12, 13),
(306, 1, 15);


/*
Database is now created with values stored into them.
Below is a list of possible queries you might conduct to pull information out of this database.
*/


--What suppliers supply which products?
SELECT
S.SupplierID,
S.CompanyName,
SP.ProductID,
P.ProductName,
P.ProductType,
COALESCE( T.TextileType, A.AccessoryType ) AS ProductTypeType,
P.ProductDescription
FROM Suppliers AS S 
JOIN SupplierProducts AS SP ON SP.SupplierID = S.SupplierID
JOIN Products AS P ON SP.ProductID = P.ProductID
LEFT JOIN Textiles AS T ON P.ProductID = T.ProductID
LEFT JOIN Accessories AS A ON P.ProductID = A.ProductID
ORDER BY S.SupplierID ASC;

--How many products are supplied by each supplier?
SELECT
S.SupplierID,
S.CompanyName,
COUNT( SP.ProductID ) AS ProductCount
FROM Suppliers AS S
JOIN SupplierProducts AS SP ON SP.SupplierID = S.SupplierID
JOIN Products AS P ON P.ProductID = SP.ProductID
GROUP BY S.SupplierID, S.CompanyName;

--How many customers with more than one email?
SELECT
CE.CustomerID,
CONCAT(C.FirstName, ' ', C.LastName) AS CustomerName
FROM CustomerEmails AS CE
INNER JOIN Customers AS C ON C.CustomerID = CE.CustomerID
GROUP BY CE.CustomerID, CONCAT(C.FirstName, ' ', C.LastName)
HAVING COUNT(CE.CustomerID) > 1;

--List customers from california that have placed an order
SELECT 
O.OrderID,
CONCAT(C.FirstName, ' ', C.LastName) AS CustomerName,
C.City
FROM Orders AS O
INNER JOIN Customers AS C ON C.CustomerID = O.OrderID
WHERE C.[State] = 'CA';

--List all stores by region
SELECT
R.RegionName,
S.StoreID,
S.[State]
FROM Regions AS R
INNER JOIN Stores AS S ON S.RegionID = R.RegionID;

--Show sales per product in July, sorted by SalesTotal
SELECT
MONTH( O.OrderDateTime ) AS [Month],
P.ProductID,
P.ProductName,
SUM (O.Quantity * P.SalesPrice ) AS SalesTotal
FROM OSPDist AS OSP
INNER JOIN Orders AS O ON O.OrderID = OSP.OrderID
INNER JOIN Products AS P ON P.ProductID = OSP.ProductID
WHERE MONTH( O.OrderDateTime ) = 7
GROUP BY MONTH( O.OrderDateTime ), P.ProductID, P.ProductName
ORDER BY SalesTotal DESC;

--How many customers in each state?
SELECT
[State],
COUNT ( CustomerID ) AS CustomerCount
FROM Customers
GROUP BY [State]
ORDER BY CustomerCount DESC;

--Show all orders that were facilitated by EmployeeID 20
SELECT
O.OrderID,
O.EmployeeID,
CONCAT(E.FirstName, ' ', E.LastName) AS EmployeeName
FROM Orders AS O
INNER JOIN Employees AS E ON E.EmployeeID = O.EmployeeID
WHERE O.EmployeeID = 20;

--How many orders were made per month?
SELECT
MONTH(OrderDateTime) AS OrderMonth,
COUNT(OrderID) AS OrderCount
FROM Orders
GROUP BY MONTH(OrderDateTime);

--Show gross sales per month and year end total
SELECT
MONTH(O.OrderDateTime) AS [Month],
SUM(O.Quantity * P.SalesPrice) AS SalesTotal
FROM OSPDist AS OSP
INNER JOIN Orders AS O ON O.OrderID = OSP.OrderID
INNER JOIN Products AS P ON P.ProductID = OSP.ProductID
GROUP BY MONTH(O.OrderDateTime)
UNION
SELECT
YEAR(O.OrderDateTime) AS [Month],
SUM(O.Quantity * P.SalesPrice) AS SalesTotal
FROM OSPDist AS OSP
INNER JOIN Orders AS O ON O.OrderID = OSP.OrderID
INNER JOIN Products AS P ON P.ProductID = OSP.ProductID
GROUP BY YEAR(O.OrderDateTime);









--Now I'm going to make an attempt at creating a stored procedure, no promises it will work.
DROP PROCEDURE IF EXISTS AddEmployee;
CREATE PROCEDURE AddEmployee
	@FirstName			VARCHAR(20),
	@MiddleName			VARCHAR(20),
	@LastName			VARCHAR(20),
	@Position			VARCHAR(30),
	@Salary				DECIMAL(8,2)
 AS
 BEGIN
	DECLARE @EmployeeID SMALLINT;

	BEGIN TRANSACTION;
		INSERT INTO Employees ( FirstName, MiddleName, LastName, Position, Salary )
		VALUES ( @FirstName, @MiddleName, @LastName, @Position, @Salary );
		SET @EmployeeID = SCOPE_IDENTITY();
	COMMIT;
 END;


 EXECUTE AddEmployee
	@FirstName = 'Ronald',
	@MiddleName = NULL,
	@LastName = 'McDonald',
	@Position = 'Mascot',
	@Salary = '20000.00';

SELECT * FROM Employees WHERE FirstName = 'Ronald' AND LastName = 'McDonald';
--That actually worked haha lets go.

EXECUTE AddEmployee
	@FirstName = 'Jacob',
	@MiddleName = 'Craig',
	@LastName = 'Case',
	@Position = 'Professor',
	@Salary = '999999.00';

SELECT * FROM Employees WHERE FirstName ='Jacob' AND LastName = 'Case';